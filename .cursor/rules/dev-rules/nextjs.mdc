---
description: 
globs: 
alwaysApply: true
---
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  
日本語指定：：

コードスタイル
    簡潔かつ明確な TypeScript を記述し、関数型プログラミングを活用する。
    コードをモジュール化し、重複を避ける。
    わかりやすい変数名を使用する（例: isLoading, hasError）。

プロジェクト構成
    ファイルは論理的に構造化する：コンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。
    ディレクトリ名は小文字＋ダッシュ（例: components/auth-wizard）とする。

TypeScript の使い方
    型は interface を優先的に使用する。
    enum は避け、Map を利用する。
    すべてのコンポーネントは関数コンポーネントとして実装する。

構文
    純粋関数には function キーワードを使う。
    JSX は宣言的かつクリーンに保つ。
    条件式は簡潔に記述する。

UI とスタイリング
    Shadcn UI、Radix UI、Tailwind CSS を利用する。
    モバイルファーストでレスポンシブにデザインする。

パフォーマンス最適化
    React Server Components を優先的に使用する。
    'use client'、useEffect、setState の使用は最小限にする。
    クライアントコンポーネントは Suspense でラップし、非クリティカルなコンポーネントは遅延読み込みする。
    画像は WebP 形式を利用し、サイズ情報を含め、遅延読み込みを実施する。

キールール
    URL の検索パラメータの状態管理には nuqs を使用する。
    Next.js のデータ取得、レンダリング、ルーティングのドキュメントに従う。
    Web Vitals（LCP, CLS, FID）を最適化する。

